---
title: "{restatis}"
subtitle: "Ein Softwarepaket für R zur Arbeit mit Zensusdatenbank, GENESIS und regionalstatistik.de"
author: "Yannik Buhl, Statistisches Bundesamt"
institute: "Statistische Woche 2024, Regensburg"
format: 
  revealjs: 
    multiplex: true
    theme: ["pp.scss"]
    slide-number: c/t
    fontcolor: "#262d36"
    highlight-style: ayu-mirage
    height: 900
    width: 1600
include-in-header:
  - text: |
      <style type="text/css">
      ul li ul li {
        font-size: 0.8em;
      }
      
      .figure {
      margin: 0 !important;
      }
      
      </style>
---

## Was ist `{restatis}` und was bringt es mit?

<br>

::: columns
::: {.column width="50%"}
### Das Paket

-   API-Wrapper für:
    -   GENESIS (StBA-Datenbank)
    -   Zensusdatenbank <br> (Zensus 2022)
    -   www.regionalstatistik.de
-   Entwickelt als Projekt <br> von [CorrelAid](www.correlaid.org)
    -   Keine Zugehörigkeit zum StBA <br> oder dem Statistischen Verbund!
    -   Erste Version 2023,<br> Update 2024
:::

::: {.column width="50%"}
### Features

-   Durchsuche Datenbanken nach:

    -   Tabellen & Cubes <br> (inkl. EVAS-Codes)
    -   Metadaten, Variablen, Werte, etc.

-   Datendownload <br> (Tabellen, Cubes)

-   Weitere Informationen abrufbar <br> (z.B. Qualitätskennzeichen)

-   Caching von API-Calls <br> mit `memoise`

    -   R-Session neu starten für Reset
:::
:::

## Installation

<br>

-   Installation über CRAN:

```{r eval=FALSE, echo=TRUE}

# CRAN-Veröffentlichung
install.packages("restatis")
```

<br>

-   Entwicklungsversion über GitHub-Repository

```{r eval=FALSE, echo=TRUE}
# Development-Version
remotes::install_github("CorrelAid/restatis")
```

## Anwendungsbeispiel

```{r echo=FALSE}
library(pacman)
pacman::p_load(dplyr, restatis, sf, ggplot2, lubridate, microplot, Cairo)
```

-   Szenario: Wir sollen eine Analyse zum Thema "Energieträger der Heizung" durchführen, basierend auf der Gebäude- und Wohnungszählung (GWZ) und nutzen hierfür die Zensusdatenbank
-   Wir suchen nach Objekten in der Zensusdatenbank zum Thema "Heizung" und ziehen aus der Ergebnis-Liste nur die Tabellen

```{r echo=TRUE, cache=TRUE}
restatis::gen_find(term = "Heizung", 
                   database = "zensus", 
                   verbose = FALSE) %>% 
  magrittr::extract2("Tables") %>% # restatis liefert Ergebnisse i.d.R. als Listen
  head(2) # Nur ein Auszug aus 49 Tabellen

```

## Anwendungsbeispiel

-   Alternativ: Suche über die `gen_catalogue()`-Funktion, Voraussetzung: Kenntnisse zu Statistik-Codes
-   Bsp.: Gebäude-Daten beginnen mit **3**

```{r eval=TRUE, echo=TRUE, cache=TRUE}
catalogue <- restatis::gen_catalogue("3*", 
                                     database = "zensus", verbose = FALSE)

print(head(catalogue$Tables$`3 - Wohnen, Umwelt`, 7))

```

## Anwendungsbeispiel

-   Nun wollen wir eine der Tabellen herunterladen (Gemeindeebene), <br> hierfür nutzen wir den `Code` der Tabelle

```{r echo=TRUE, cache=TRUE}
heizung <- restatis::gen_table(name = "3000G-1008", 
                               database = "zensus")

head(heizung, 4)
```

-   Das wollen wir nicht - es sind Daten für ganz Deutschland. Aber es scheint eine Variable mit Geo-Bezug zu geben (`GEODL1`)

## Anwendungsbeispiel

-   Also müssen wir sehen, welche weiteren Variablen wir noch für die Statistik (`3000G`) wählen können

```{r echo=TRUE}
heiz_vars <- restatis::gen_var2stat(code = "3000G", 
                                    database = "zensus", 
                                    verbose = FALSE)

heiz_vars$Variables[11:16,]
```

## Anwendungsbeispiel

-   `GEOGM4` ist die Variable, die wir gesucht haben
-   Also nutzen wir sie über den Parameter `regionalvariable`

```{r echo=TRUE, cache=TRUE}
heizung <- restatis::gen_table("3000G-1008", 
                               database = "zensus", 
                               regionalvariable = "GEOGM4",
                               language = "de")

head(heizung[,9:17])
```

## Anwendungsbeispiel

-   Nun kennen wir die Tabelle, die wir möchten
-   Aber welche Informationen gibt es zu ihr?

```{r echo=TRUE, eval=TRUE, cache=TRUE}
metadata_table <- restatis::gen_metadata("3000G-1008", 
                                         database = "zensus", 
                                         category = "table", verbose = FALSE)

print(metadata_table$Structure$Columns)
print(metadata_table$Structure$Rows)

```

## Anwendungsbeispiel

- Theoretisch können wir sogar noch weiter in die Tiefe:

```{r echo=TRUE}
metadata_values <- restatis::gen_val2var("GEBEN1", 
                                         database = "zensus", error.ignore = TRUE)

print(metadata_values$`Values of GEBEN1` %>% head(3))

metadata_variable <- restatis::gen_metadata("GEBEN1",
                                            database = "zensus",
                                            category = "variable", verbose = FALSE)

print(metadata_variable$Information)

```


## Anwendungsbeispiel

-   Um die prozentualen Anteile der Energieträger pro Gemeinde zu bekommen, sind noch einige Verarbeitungen notwendig

```{r echo=TRUE}
heizung_filter <- heizung %>% 
                    filter(`2_variable_attribute_label` != "Insgesamt" & 
                           value_unit == "%") %>% 
                    group_by(`1_variable_attribute_code`) %>% 
                    slice_max(value, with_ties = FALSE) %>% 
                    ungroup()

unique(heizung_filter$`2_variable_attribute_label`)

```

## Anwendungsbeispiel: Ergebnis

```{r echo=FALSE, eval=TRUE, cache=TRUE}
shp <- sf::read_sf("data/Shapefile_Zensus2022/EPSG_25832/VG250_GEM.shp") %>% 
        filter(BEZ != "Gemeindefreies Gebiet")

df <- right_join(shp, heizung_filter,
                 by = c("ARS" = "1_variable_attribute_code")) %>% 
        group_by(ARS) %>% 
        slice_max(lubridate::as_date(BEGINN), with_ties = FALSE) %>% 
        ungroup()
```

```{r de_karte, eval=TRUE, dpi=1000, fig.format='CairoPNG', cache=TRUE}
ggplot(df) +
  geom_sf(aes(fill = `2_variable_attribute_label`)) +
  theme_collapse() +
  labs(title = "Vorherrschender Energieträger pro Gemeinde",
       subtitle = "Quelle: Zensus 2022",
       fill = "Energieträger") + 
  theme(axis.line = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.title = element_blank(),
        axis.ticks.length = unit(0, "pt"), #length of tick marks
        panel.background = element_blank(),
        panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        plot.background = element_rect(fill = "#fff2cc"), 
        plot.margin = margin(t = 5, l = 5, r = 0, b = 0, unit = "mm")) 

```

## Authentifizierung

-   Alle drei APIs benötigen Nutzeraccounts
-   Verschiedene Funktionen zur "Anmeldung"
    -   `restatis::gen_auth_save()`: Speichere Zugangsdaten
    -   `restatis::gen_auth_get()`: Lese Zugangsdaten aus
    -   `restatis::gen_logincheck()`: Teste, ob Login funktioniert
-   Alle Funktionen können für alle APIs genutzt werden, <br> für Teile von ihnen oder für nur eine
-   Zugangsdaten werden lokal in einer verschlüsselten `.rds`-Datei gespeichert
-   Schlüssel dazu wird in `.Renviron` gespeichert
-   Zensusdatenbank akzeptiert auch API-Token

## Sonstige Funktionalität: Datendownload

-   `{restatis}` bietet weitere Funktionen für den Datendownload:
    -   `gen_cube()`: Download von sogenannten Datenquadern, gibt es nur bei GENESIS und regionalstatistik.de, nicht beim Zensus 2022
    -   `gen_list_jobs()`: Liste mit aktiven und fertiggestellten "Jobs", die erstellt werden, wenn Tabellen zu groß für den direkten Download sind ("Jobs" gibt es auch nur bei GENESIS und www.regionalstatistik.de)
    -   `gen_download_job()`: Download von fertiggestellten "Jobs"
-   Beispiel:

```{r bsp_jobs, echo=TRUE, eval=TRUE, error=TRUE}

# Diese Anfrage ist zu groß => Parameter job = TRUE ist nötig
large_request <- restatis::gen_table("31111-01-02-4", database = "regio")
# large_request <- restatis::gen_table("31111-01-02-4", database = "regio", job = TRUE)

```

## Sonstige Funktionalität

-   Daten & Metadaten finden

    -   `gen_objects2stat()`: Finde Objekte zu einer Statistik

    -   `gen_objects2var()`: Finde Objekte zu einer Variablen

    -   `gen_val2var()`: Extrahiere mögliche Werte einer Variablen

    -   `gen_val2var2stat()`: Finde Werte einer Variable zu einer Statistik

    -   `gen_search_vars()`: Suche spezifische Variablen

-   Hilfsfunktionen

    -   `gen_modified_data()`: Suche nach Updates, Änderungen oder neuen Objekten anhand eines spezifischen Datums

    -   `gen_alternative_terms()`: Finde Suchbegriffe, die ähnlich oder verwandt sind zueinander (Schreibweise)

    -   `gen_signs()`: Funktion, alle aktuellen Qualitätskennzeichen und deren Bedeutung aufzulisten (z.B., 0, \*, X, (), p, ...)

    -   `gen_update_evas()`: Funktion, um die aktuellen EVAS-Nummern von der EVAS-Seite zu scrapen

## Schwesterpaket 'pystatis'

<br>

-   `{restatis}` verfügt über ein Python-Schwesterpaket
-   [pystatis](https://pypi.org/project/pystatis/) ist auf PyPI zu finden
-   Funktionalität grundsätzlich relativ ähnlich
-   Unterstützt ebenfalls alle drei Datenbanken
-   Die Entwicklungsversion ist auf [GitHub](https://github.com/CorrelAid/pystatis) zu finden

<br>

- Außerdem gibt es noch das `wiesbaden`-Paket
  - Baut auf SOAP/XML statt auf RESTful/JSON
  - Kein Support für die Zensusdatenbank

## Danke![^1]

[^1]: Diese Präsentation ist erstellt mit `Quarto` und basiert auf einer Vorlage von [Mine Cetinkaya-Rundel](https://github.com/mine-cetinkaya-rundel); Schriftart: [Fira Code Medium](https://github.com/tonsky/FiraCode).

<br><br>

-   `{restatis}` ist ein Open-Source-Projekt
-   Noch kein stabiler Release (Version 0.2.0)
-   Bitte rege benutzen und Rückmeldung geben
-   Am besten über [GitHub](https://github.com/CorrelAid/restatis/issues)
-   Nächste Schritte u.a.:
    -   Umstellung von Zensusdatenbank und GENESIS zu POST (statt GET)

Kontakt: yannik.buhl /at/ destatis.de oder yannikbuhl (GitHub)
