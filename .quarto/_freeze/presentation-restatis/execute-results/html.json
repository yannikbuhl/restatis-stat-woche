{
  "hash": "1a6db5cf21b5c4391b68f98f1a35f4c1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"{restatis}\"\nsubtitle: \"Ein Softwarepaket für R zur Arbeit mit Zensusdatenbank, GENESIS und regionalstatistik.de\"\nauthor: \"Yannik Buhl, Statistisches Bundesamt\"\ninstitute: \"Statistische Woche 2024, Regensburg\"\nformat: \n  revealjs: \n    multiplex: true\n    theme: [\"pp.scss\"]\n    slide-number: c/t\n    fontcolor: \"#262d36\"\n    highlight-style: ayu-mirage\n    height: 900\n    width: 1600\ninclude-in-header:\n  - text: |\n      <style type=\"text/css\">\n      ul li ul li {\n        font-size: 0.8em;\n      }\n      </style>\n---\n\n\n## Was ist {restatis} und was bringt es mit?\n\n<br>\n\n::: columns\n::: {.column width=\"50%\"}\n### Das Paket\n\n-   API-Wrapper für:\n    -   GENESIS (StBA-Datenbank)\n    -   Zensusdatenbank <br> (Zensus 2022)\n    -   www.regionalstatistik.de\n-   Entwickelt als Projekt <br> von [CorrelAid](www.correlaid.org)\n    -   Keine Zugehörigkeit zum StBA <br> oder dem Statistischen Verbund!\n    -   Erste Version 2022,<br> Update 2024\n:::\n\n::: {.column width=\"50%\"}\n### Features\n\n-   Durchsuche Datenbanken nach:\n\n    -   Tabellen & Cubes <br> (inkl. EVAS-Codes)\n    -   Metadaten, Variablen, Werte\n\n-   Datendownload <br> (Tabellen, Cubes)\n\n-   Weitere Informationen abrufbar <br> (z.B. Sonderzeichen)\n:::\n:::\n\n## Installation\n\n<br>\n\n-   Installation über CRAN:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# CRAN-Veröffentlichung\ninstall.packages(\"restatis\")\n```\n:::\n\n\n<br>\n\n-   Entwicklungsversion über GitHub-Repository\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Development-Version\nremotes::install_github(\"CorrelAid/restatis\")\n```\n:::\n\n\n## Anwendungsbeispiel\n\n\n::: {.cell}\n\n:::\n\n\n-   Szenario: Wir sollen eine Analyse zum Thema \"Heizungsarten\" durchführen, basierend auf der Gebäude- und Wohnungszählung (GWZ)\n-   Wir suchen nach Objekten in der Zensusdatenbank zum Thema \"Heizung\" und ziehen aus der Ergebnis-Liste nur die Tabellen\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrestatis::gen_find(term = \"Heizung\", \n                   database = \"zensus\", \n                   verbose = FALSE, \n                   error.ignore = TRUE) %>% \n  \n  # restatis liefert Ergebnisse i.d.R. als Listen\n  magrittr::extract2(\"Tables\") %>% \n  head(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  Code       Content                            Object_Type\n  <chr>      <chr>                              <chr>      \n1 3000G-1008 Gebäude: Energieträger der Heizung table      \n2 3000G-1011 Gebäude: Heizungsart               table      \n```\n\n\n:::\n:::\n\n\n## Anwendungsbeispiel\n\n-   Nun wollen wir eine der Tabellen herunterladen (Gemeindeebene)\n-   Wir nutzen hierfür den `Code` der Tabelle\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheizung <- restatis::gen_table(name = \"3000G-1008\", \n                               database = \"zensus\")\nhead(heizung, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 17\n  statistics_code statistics_label  time_code time_label time  `1_variable_code`\n  <chr>           <chr>             <chr>     <chr>      <chr> <chr>            \n1 3000G           Buildings (terri… STAG      Reference… 2022… GEODL1           \n2 3000G           Buildings (terri… STAG      Reference… 2022… GEODL1           \n3 3000G           Buildings (terri… STAG      Reference… 2022… GEODL1           \n4 3000G           Buildings (terri… STAG      Reference… 2022… GEODL1           \n# ℹ 11 more variables: `1_variable_label` <chr>,\n#   `1_variable_attribute_code` <chr>, `1_variable_attribute_label` <chr>,\n#   `2_variable_code` <chr>, `2_variable_label` <chr>,\n#   `2_variable_attribute_code` <chr>, `2_variable_attribute_label` <chr>,\n#   value <chr>, value_unit <chr>, value_variable_code <chr>,\n#   value_variable_label <chr>\n```\n\n\n:::\n:::\n\n\n-   Das wollen wir nicht - es sind Daten für ganz Deutschland\n-   Aber es scheint eine Variable mit Geo-Bezug zu geben (`GEODL1`)\n\n## Anwendungsbeispiel\n\n-   Also müssen wir sehen, welche weiteren Variablen wir noch für die Statistik (`3000G`) wählen können\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheiz_vars <- restatis::gen_var2stat(code = \"3000G\", \n                                    database = \"zensus\", \n                                    verbose = FALSE)\nheiz_vars$Variables[11:16,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  Code   Content                                      Object_Type\n  <chr>  <chr>                                        <chr>      \n1 GEOBL1 Bundesländer                                 Variable   \n2 GEOBZ1 Bezirke (Hamburg und Berlin)                 Variable   \n3 GEODL1 Deutschland                                  Variable   \n4 GEOGM4 Gemeinden (Gebietsstand 15.05.2022)          Variable   \n5 GEOLK4 Landkreise u. krsfr. Städte (Stand 15.05.22) Variable   \n6 GEORB1 Regierungsbezirke/Statistische Regionen      Variable   \n```\n\n\n:::\n:::\n\n\n## Anwendungsbeispiel\n\n-   `GEOGM4` ist die Variable, die wir gesucht haben\n-   Also nutzen wir sie über den Parameter `regionalvariable`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheizung <- restatis::gen_table(\"3000G-1008\", \n                               database = \"zensus\", \n                               regionalvariable = \"GEOGM4\",\n                               language = \"de\")\nhead(heizung[,9:17])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  `1_variable_attribute_label` `2_variable_code` `2_variable_label`       \n  <chr>                        <chr>             <chr>                    \n1 Herborn                      GEBEN1            Energieträger der Heizung\n2 Herborn                      GEBEN1            Energieträger der Heizung\n3 Schönau a.Königssee          GEBEN1            Energieträger der Heizung\n4 Schönau a.Königssee          GEBEN1            Energieträger der Heizung\n5 Elterlein, Stadt             GEBEN1            Energieträger der Heizung\n6 Elterlein, Stadt             GEBEN1            Energieträger der Heizung\n# ℹ 6 more variables: `2_variable_attribute_code` <chr>,\n#   `2_variable_attribute_label` <chr>, value <chr>, value_unit <chr>,\n#   value_variable_code <chr>, value_variable_label <chr>\n```\n\n\n:::\n:::\n\n\n## Anwendungsbeispiel\n\n-   Um die prozentualen Anteile der Energieträger pro Gemeinde zu bekommen, sind noch einige Verarbeitungen notwendig\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheizung_filter <- heizung %>% filter(`2_variable_attribute_label` != \"Insgesamt\" & \n                                     value_unit == \"%\")\n\nunique(heizung_filter$`2_variable_attribute_label`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Kein Energieträger (keine Heizung)\"    \n[2] \"Fernwärme (verschiedene Energieträger)\"\n[3] \"Biomasse (ohne Holz), Biogas\"          \n[4] \"Gas\"                                   \n[5] \"Holz, Holzpellets\"                     \n[6] \"Solar-/Geothermie, Wärmepumpen\"        \n[7] \"Heizöl\"                                \n[8] \"Kohle\"                                 \n[9] \"Strom (ohne Wärmepumpe)\"               \n```\n\n\n:::\n:::\n\n\n## Anwendungsbeispiel\n\n-   Karte mit dem größten Anteil pro Gemeinde\n\n-   Welche \"Funktionen\" fehlen noch?\n\n-   pystatis-Folie\n\n-   <https://www.zeit.de/wirtschaft/2024-06/zensus-2022-heizung-oel-gas-fernwaerme-waermepumpe-wohnungen>\n",
    "supporting": [
      "presentation-restatis_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}